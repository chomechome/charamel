"""
üåè Charamel: Truly Universal Encoding Detection in Python üåé
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Licensed under Apache 2.0
"""
import pytest

from charamel import Detector, Encoding
from tests.fixtures import FIXTURE_DIRECTORY, iter_fixtures
from tests.utils import is_correct_encoding, skip


@pytest.fixture(name='detector', scope='session')
def _get_detector():
    return Detector()


def test_no_encodings():
    with pytest.raises(ValueError, match='No encodings specified'):
        Detector(encodings=[])


@pytest.mark.parametrize('min_confidence', [-0.001, 1.001])
def test_incorrect_min_confidence(min_confidence):
    with pytest.raises(ValueError, match='min_confidence must be in range'):
        Detector(min_confidence=min_confidence)


@pytest.mark.parametrize(
    ('text', 'encoding'),
    [
        ('hello', Encoding.ASCII),
        ('—Ä—É—Å—Å–∫–∏–π', Encoding.UTF_8),
        ('‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç', Encoding.UTF_8),
        ('·†Æ·††·†®·†µ·°† ·°§·°≥·†∞·°†·†®', Encoding.UTF_8),
        ('ÂúãË™û', Encoding.UTF_8),
        ('‡§Æ‡§∞‡§æ‡§†‡•Ä', Encoding.UTF_8),
        ('‡¶Æ‡¶®‡¶ø‡¶™‡ßÅ‡¶∞‡¶ø, ‡¶Æ‡ßà‡¶§‡ßà‡¶≤‡ßã‡¶≤‡ßç, ‡¶Æ‡ßà‡¶§‡ßà‡¶≤‡ßã‡¶®‡ßç, ‡¶Æ‡ßà‡¶•‡ßà', Encoding.UTF_8),
        ('ÈóΩÂåóËØ≠', Encoding.UTF_8),
        ('·Äò·Ä¨·Äû·Ä¨ ·Äô·Äî·Ä∫', Encoding.UTF_8),
        ('·†Æ·†£·†®·†≠·†≠·†£·†Ø ·†¨·†°·†Ø·†°', Encoding.UTF_8),
        ('ÍÜàÍå†Ííø', Encoding.UTF_8),
        ('‡¨ì‡¨°‡¨º‡¨ø‡¨Ü', Encoding.UTF_8),
        ('·êä·ìÇ·îë·ìà·êØ·íß·êé·ìê', Encoding.UTF_8),
        ('„Ç¶„ÉÅ„Éä„Éº„É§„Éû„Éà„Ç•„Ç∞„ÉÅ', Encoding.UTF_8),
        ('‚Ä† -', Encoding.UTF_8),
        ('Rom√¢nƒÉ', Encoding.UTF_8),
        ('anar√¢≈°kiel√¢', Encoding.UTF_8),
        ('·Äú·Ä≠·Åµ·Ä∫·Çà·Äê·ÇÜ·Ä∏', Encoding.UTF_8),
        ('‡Ω†‡Ωñ‡æ≤‡Ω¶‡ºã‡Ω£‡æó‡Ωº‡ΩÑ‡Ω¶‡ºã', Encoding.UTF_8),
        ('schwyzerd√ºtsch', Encoding.UTF_8),
        ('·âµ·åç·à≠·äõ', Encoding.UTF_8),
        ('·†∞·°û·†™·°ù·°§·°û·†∞·°†·†®', Encoding.UTF_8),
        ('Í°ñÍ°çÍ°ÇÍ°õ Í°å', Encoding.UTF_8),
        ('’Ä’°’µ’Ø’°’Ø’°’∂ ‘±’µ’¢’∏÷Ç’¢’•’∂', Encoding.UTF_8),
        ('‚†É‚†ó‚†Å‚†ä‚†á‚†ë', Encoding.UTF_8),
        ('êíÑêíãêí¶êí©êíóêíì', Encoding.UTF_8),
        ('êä¥êä†êä•êäπêä†êäµ', Encoding.UTF_8),
        ('‚∞ç‚±õ‚∞ì‚∞ä‚∞é‚∞é‚∞ë‚∞Ç‚±Ñ‚∞ú‚∞Ä', Encoding.UTF_8),
        ('–ö—∑—Ä—ó–ª–ª–æ–≤–∏—Ü–∞', Encoding.UTF_8),
        ('êêîêêØêëÖêê®êëâêêØêêª', Encoding.UTF_8),
        ('êëñêë±êëùêëæêëØ', Encoding.UTF_8),
        ('·ö±·ö¢·öæ·õü', Encoding.UTF_8),
        ('fran√ßais', Encoding.UTF_16),
        ('espa√±ol', Encoding.UTF_32),
        ('‰Ω†Â•Ω', Encoding.BIG_5),
        ('‰Ω†Â•Ω', Encoding.BIG_5_HKSCS),
        ('‰Ω†Â•Ω', Encoding.GB_2312),
        ('‰Ω†Â•Ω', Encoding.GB_18030),
        ('‰Ω†Â•Ω', Encoding.GB_K),
        ('–ø—Ä–∏–≤–µ—Ç', Encoding.CP_1251),
        ('–ø—Ä–∏–≤–µ—Ç', Encoding.KOI_8_R),
        ('–ø—Ä–∏–≤–µ—Ç', Encoding.KOI_8_U),
        ('Carter‚Äôs Janitorial', Encoding.UTF_8),
        ('Carter‚Äôs Janitorial', Encoding.UTF_16),
        ('Carter‚Äôs Janitorial', Encoding.UTF_32),
        ('El espa√±ol o castellano es una lengua romance', Encoding.UTF_8),
        ('El espa√±ol o castellano es una lengua romance', Encoding.LATIN_1),
        ('El espa√±ol o castellano es una lengua romance', Encoding.ISO_8859_14),
        ('R√©seau D√©mographie de l\'Agence universitaire', Encoding.UTF_8),
        ('R√©seau D√©mographie de l\'Agence universitaire', Encoding.LATIN_1),
        ('R√©seau D√©mographie de l\'Agence universitaire', Encoding.ISO_8859_14),
        ('–ø–æ–µ—Ç—ñ–≤ –¥–æ –¥–Ω—è –ø–æ–µ–∑—ñ—ó', Encoding.UTF_8),
        ('–ø–æ–µ—Ç—ñ–≤ –¥–æ –¥–Ω—è –ø–æ–µ–∑—ñ—ó', Encoding.CP_1251),
        ('–ø–æ–µ—Ç—ñ–≤ –¥–æ –¥–Ω—è –ø–æ–µ–∑—ñ—ó', Encoding.KOI_8_U),
        ('¬º + ¬Ω', Encoding.UTF_8),
    ],
)
def test_decode(detector, text, encoding):
    content = text.encode(encoding)
    encoding = detector.detect(content)
    assert is_correct_encoding(content, encoding, text)


@pytest.mark.parametrize(
    ('content', 'expected'),
    [(b'\xc4\xe3\xba\xc3', {Encoding.GB_K, Encoding.GB_2312, Encoding.GB_18030})],
)
def test_probe(detector, content, expected):
    probes = detector.probe(content)
    assert {enc for enc, _ in probes} == expected


_KNOWN_FAILURES = {
    FIXTURE_DIRECTORY / 'big5' / 'coolloud.org.tw.xml',
    FIXTURE_DIRECTORY / 'big5' / 'upsaid.com.xml',
    FIXTURE_DIRECTORY / 'cp932' / 'hardsoft.at.webry.info.xml',
    FIXTURE_DIRECTORY / 'cp932' / 'www2.chuo-u.ac.jp-suishin.xml',
    FIXTURE_DIRECTORY / 'iso_8859_11' / 'th.txt',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'af.xml',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'bom-utf-16-be.srt',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'br.xml',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'ca.xml',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'da.xml',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'et.xml',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'eu.xml',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'fi.xml',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'gl.xml',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'ms.xml',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'no.xml',
    FIXTURE_DIRECTORY / 'utf_16_be' / 'sv.xml',
    FIXTURE_DIRECTORY / 'utf_16_le' / 'bom-utf-16-le.srt',
    FIXTURE_DIRECTORY / 'utf_16_le' / 'da.xml',
    FIXTURE_DIRECTORY / 'utf_16_le' / 'fi.xml',
    FIXTURE_DIRECTORY / 'utf_16_le' / 'id.xml',
    FIXTURE_DIRECTORY / 'utf_16_le' / 'sq.xml',
    FIXTURE_DIRECTORY / 'utf_16_le' / 'tl.xml',
    FIXTURE_DIRECTORY / 'utf_32' / 'bom-utf-32-be.srt',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'af.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'br.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'ca.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'da.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'et.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'eu.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'fi.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'gl.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'id.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'ms.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'no.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'sq.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'sv.xml',
    FIXTURE_DIRECTORY / 'utf_32_be' / 'tl.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'af.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'br.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'ca.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'et.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'eu.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'gl.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'id.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'ms.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'no.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'sq.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'sv.xml',
    FIXTURE_DIRECTORY / 'utf_32_le' / 'tl.xml',
    FIXTURE_DIRECTORY / 'utf_7' / 'ze.xml',
}


def _iter_fixtures_without_known_failures():
    for path, encoding in iter_fixtures():
        if path in _KNOWN_FAILURES:
            yield skip(path, encoding, reason='Known detection failure')
        else:
            yield path, encoding


@pytest.mark.parametrize(('path', 'encoding'), _iter_fixtures_without_known_failures())
def test_files(detector, path, encoding):
    with path.open('rb') as f:
        content = f.read()

    expected = content.decode(encoding)
    encoding = detector.detect(content)
    assert is_correct_encoding(content, encoding, expected)
